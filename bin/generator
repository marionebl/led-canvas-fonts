#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

var inFile = process.argv[2];
var outFile = process.argv[3];
var fullInFile = path.resolve(process.cwd(), inFile || '');
var fullOutFile = path.resolve(process.cwd(), outFile || '');
var fileContent = null;
var characters = [];
var output = null;

var font = {
	meta: {
		monospaced: true,
		charWidth: -1,
		lineHeight: -1
	},
	chars: {}
};


if (!inFile) {
	return console.log('Please specify a filename as input.');
}

if (!fs.existsSync(fullInFile)) {
	return console.log('File:', fullInFile, 'does not exist.');
}


fileContent = fs.readFileSync(fullInFile).toString('utf-8');
characters = fileContent.split(/\n\n/).map(function (character) {
	// remove empty lines (final newline)
	return character.split(/\n/).filter(function (line) {
		return line !== '';
	});
});


font.meta.charWidth = characters.reduce(charWidth, 0);
font.meta.lineHeight = characters.reduce(charHeight, 0);
font.meta.monospaced = characters.every(function (character) {
    return charWidth(0, character) === font.meta.charWidth;
});


for (var i = 0; i < characters.length; i += 1) {
	var charData = characters[i];
	var characterWidth = charWidth(0, charData);
	var identifier = charData.shift().replace('# ', '');
	var mangledData = generateCharData(charData, characterWidth, font.meta.lineHeight);

	font.chars[identifier] = {
		data: mangledData.data,
		offset: mangledData.offset,
		width: characterWidth
	};
}

output = JSON.stringify(font, null, 2);
if (!outFile) {
	console.log(output);
} else {
	fs.writeFileSync(fullOutFile, output);
}


function charWidth(initial, character) {
	var lineLengths = character.map(function (line) { return line.length; });
	var maxLength = Math.max.apply(Math, lineLengths);
	return maxLength > initial ? maxLength : initial;
}

function charHeight(initial, character) {
	var len = character.length - 1;
	return len > initial ? len : initial;
}

function matchingCoords(x, y){
	return function (coord) {
		return coord.x === x && coord.y === y;
	};
}

function generateCharData(character, width, height) {
	var coords = [];
	var data = [];
	var matrixLength = width*height;

	for (var y = 0; y < character.length; y += 1) {
		var line = character[y];

		for (var x = 0; x < line.length; x += 1) {
			if ([' ', '#', '.'].indexOf(line.charAt(x)) === -1) {
				coords.push({ x: x, y: y });
			}
		}
	}

	for (var i = 0; i < matrixLength; i += 1) {
		var yc = Math.floor(i/width);
		var xc = Math.floor(i - yc*width);

		var match = coords.filter(matchingCoords(xc, yc));
		if (match.length === 1) {
			data.push(i);
		}
	}

	var offset = data[0];

	data = data.map(function(pixel) {
		return pixel - offset;
	});

	return {
		data: data,
		offset: offset
	};
}
